1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Перед розробкою серверної частини, треба чітко описати всі сутності, котрі будуть необхідні для реалізації визначеного функціоналу. Для цього можна розробити ER-модель даних, завдяки якій можна візуалізувати всі сутності та зв’язки між ними. Після визначення всіх необхідних сутностей, була створена ER- модель даних(див. рис. Б.1 у додатку Б).
Модель даних включає в себе наступні сутності та поля для них:
а) тварина:
1)	id;
2)	ім’я;
3)	вид;
4)	порода;
5)	вік;
6)	гендер;
7)	власник; 
      в) користувач:
1)	id;
2)	нікнейм;
3)	пошта;
4)	пароль;
5)	локація;
6)	тварини;
      г) менеджер:
1)	id;
2)	нікнейм;
3)	пошта;
4)	локація;
5)	список_тварин;
      ґ) адміністратор:
1)	id;
2)	нікнейм;
3)	пошта;
4)	пароль;
      д) запит_на_в’язку:
1)	id;
2)	запитувач;
3)	тварина;
4)	опис;
5)	дата_створення;
6)	статус;
      е) прийняття_запиту_на_в’язку:
1)	id;
2)	запит_на_в’язку;
3)	користувач;
4)	дата_прийняття;
      в) повідомлення:
1)	id;
2)	відправник;
3)	отримувач;
4)	текст_повідомлення;
5)	дата_відправлення;
      в) відгук:
1)	id;
2)	рецензент;
3)	рецензований_користувач;
4)	текст_відгуку;
5)	рейтинг;
Усі сутності мають поля, необхідні для належної реалізації запланованого функціоналу системи. Після визначення всіх об'єктів необхідно перейти до визначення основних сценаріїв використання програмної системи. Для цього найбільш відповідною є UML-діаграма прецедентів. Після аналізу функціоналу, який був визначений у документі «Vision & Scope», була створена UML-діаграма прецедентів (див. рис. Б.2 у додатку Б), в якій визначено четверо акторів: користувач, менеджер, адміністратор та датчик. 
Всі актори отримали весь раніше визначений функціонал.  Користувач може змінювати особисту інформацію, переглядати інформацію про свого улюбленця, додавати нових тварин.
Менеджер може керувати профілями тварин, їх вид, породу, вік. Він має змогу формувати звітність по зареєстрованим тваринам, що дає змогу власникам мати всю інформацію про потенційних партнерів для в’язки.
Адміністратор може змінювати будь-які дані в базі даних та отримувати необхідну інформацію. Він має доступ до функціоналу, котрий є у користувача та менеджера.
Останній актор, це датчик і він може бути прикріплений до нашийника і відстежувати місцезнаходження тварини в реальному часі. 
У результаті концептуального моделювання предметної області, було розроблено дві діаграми та визначені основні сутності програмної системи. Тепер можна перейти до реалізації інженерних рішень. 

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Технології були для написання серверної частини були обрані виходячи з функціональних потреб системи та з особистого досвіду. Тому для написання серверної частини була обрана платформа Django. Специфікація REST орієнтована на використання архітектурного стилю, який підкреслює використання ресурсів та їх ідентифікацію за допомогою URI. В Django були використані представлення,для створення RESTful веб-сервісів, які взаємодіють за принципами архітектурного стилю REST.
         У якості бази даних була використана база даних SQLite, оскільки вона надає гнучкість та ефективність у роботі з документами та має високу надійність. SQLite дозволяє легко масштабувати систему,  пристосовуючись до зростання обсягу даних та забезпечуючи швидкий доступ до інформації. Серверна частина взаємодіє з базою даних завдяки Django REST API.
Спілкування між сервером та клієнтською частиною буде реалізоване теж за допомогою REST API. Такий самий тип спілкування застосований і для мобільного додатку, і для IoT. Більш детальніше розглянути взаємодію серверної частини з іншими елементами системи можна на UML діаграмі розгортання(див. рис. 3.1). 
Надходження даних від IoT теж буде реалізоване завдяки REST API. Для кращого розуміння взаємодії IoT з серверною частиною, була розроблена UML діаграма діяльності. Алгоритм має циклічний характер тому починається з очікування в одну хвилину. Далі іде перевірка на рух в зоні бачення датчика і відправка POST-запиту з результатом до серверної частини. Після отримання запиту серверною частиною, відбувається перевірка статусу. Якщо статус вказує що рух є, то відбувається зміна статусу датчика в базі даних після чого додається одна хвилина до поточного часу в історії використання і відбувається збереження змін в базі даних. Якщо ж рух не був виявлений, то відбувається зміна статусу в базі  даних і збереження її. З таким підходом, можна досягти отримання використання обладнання в реальному часі.
Рисунок 3.2 – UML діаграма діяльності.
Розглядаючи структуру серверної частини, варто відзначити, що вона складається з 2 взаємопов’язаних частин 
Кожна частина відповідає за певний функціонал:
-	Частина pair_paws_app це веб-додаток Django, який є частиною головного проекту “PairPaws”. Він містить моделі (models.py), види (views.py), шаблони (templates/) та інші компоненти, необхідні для реалізації функціональності веб-додатку.
-	Частина	PairPaws це головний проект Django, який служить контейнером для веб-додатку. Він містить конфігураційні файли, такі як settings.py (де налаштовуються параметри проекту, такі як підключення до бази даних, встановлені додатки, середовище для статичних файлів тощо) та urls.py (де визначаються маршрути URL для веб-додатку).


3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Специфікація REST API наведена в таблиці 1 нижче.
Таблиця 1 – Специфікація REST API серверної частини системи
Сутність	Метод	Посилання	Дія
Адміни	GET	/Admins	Повернення списку адмінів
		/Admins/{id}	Повернення списку адмінів ідентифікатором
	POST	/Admins
	Реєстрація адміністратора в системі
	PUT	/Admins/{id}	Оновлення даних адміністратора
	DELETE	/Admins/{id}	Видалення адміністратора з системи
	PATCH	/Admins/{id}	Часткове оновлення даних про адміна
Менеджери	GET	 /Managers	Повернення всіх менеджерів
		 /Managers/{id}	Повернення менеджера за його ідентифікатором
	POST	/Managers	Додавання менеджера до бази даних
	PUT	 /Managers/{id}	Оновлення даних менеджера
	DELETE	 /Managers/{id}	Видалення менеджера з системи
	PATCH	 /Managers/{id}	Часткове оновлення даних про менеджера
	Продовження таблиці 1
Сутність	Метод	Посилання	Дія
Повідомлення	GET	 /Messages	Повернення всіх повідомлень, зареєстрованих в БД
		 /Messages/{id}	Повернення повідомлення за ідентифікатором
	POST	 /Messages	Відправлення (додавання) повідомлення до бази даних
	PUT	 /Messages/{id}	Оновлення даних повідомлення
	DELETE	 /Messages/{id}	Видалення повідомлення з системи
	PATCH	 /Messages/{id}	Часткове оновлення даних повідомлення
Прийняті запити на в’язку	GET	 /Pet-mate-matches	Повернення всіх прийнятих запитів на в’язку
		 /Pet-mate-matches /{id}	Повернення прийнятого запиту за ідентифікатором
	POST	 /Pet-mate-matches	Додавання інформації про прийнятий запит
	PUT	 /Pet-mate-matches /{id}	Оновлення даних про запит
	  DELETE	 /Pet-mate-matches /{id}	Видалення даних про прийнятий запит на в’язку
	   PATCH	 /Pet-mate-matches /{id}	Часткове оновлення даних про прийнятий запит
	Продовження таблиці 1
Сутність	Метод	Посилання	Дія
Запити на в’язку	GET	/Pet-mate-requests
	Повертає всі запити, що зареєстровані в системі
		/Pet-mate-requests /{id}	Повертає дані про запит за його ідентифікатором
	POST	/Pet-mate-requests	Реєструє запит в системі
	PUT	/Pet-mate-requests /{id}	Оновлює дані про запит за його ідентифікатором
	DELETE	/Pet-mate-requests /{id}	Видалення даних про запит за його ідентифікатором
	PATCH	/Pet-mate-requests /{id}	Часткове оновлення даних про запит
Тварини	GET	/Pets	Повернення списку всіх тварин
		/Pets/{id}	Повернення даних про тварину за її ідентифікатором
	POST	/Pets	Реєстрація тварини в системі
	PUT	/Pets/{id}	Оновлення даних про тварину за її ідентифікатором
	DELETE	/Pets/{id}	Видалення даних про тварину за її ідентифікатором
	PATCH	/Pets/{id}	Часткове оновлення даних про тварину
	Продовження таблиці 1
Сутність	Метод	Посилання	Дія
 Відгуки	GET	/Reviews	Повертає всі зареєстровані відгуки
		/Reviews/{id}	Повертає відгук за його ідентифікатором
	POST	/Reviews	Реєструє відгук в базі даних
	PUT	/Reviews/{id}
	Оновлення відгуку за його ідентифікатором
	DELETE	/Reviews/{id}	Видалення відгуку за його ідентифікатором
	PATCH	/Reviews/{id}	Часткове оновлення даних про відгук
Користувачі	GET	/Users	Повертає всіх користувачів, котрі зареєстровані в системі
		/Users/{id}	Повертає дані про користувача за його ідентифікатором
	POST	/Users	Реєструє користувача в системі
	PUT	/Users/{id}	Оновлює дані про користувача за його ідентифікатором
	DELETE	/Users/{id}
	Видаляє дані про користувача за його ідентифікатором
	PATCH	/Users/{id}	Часткове оновлення даних користувача

ДОДАТОК А
Специфікація REST